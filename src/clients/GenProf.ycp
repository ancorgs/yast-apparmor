/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
{
  import "Label";
  import "Wizard";
  import "Popup";
  import "Sequencer";
  include "apparmor/apparmor_profile_check.ycp";
  include "apparmor/apparmor_packages.ycp";
  include "apparmor/apparmor_ycp_utils.ycp";
  include "apparmor/helps.ycp";
  textdomain  "yast2-apparmor";

  boolean done  = false;
  string type   = "";
  string status = "";

  // no command line support #269891
  if (size(WFM::Args()) > 0 )
  {
	import "CommandLine";
	CommandLine::Init($[], WFM::Args());
	return;
  }

  if (!installAppArmorPackages()) {
    return;
  }
  if (!checkProfileSyntax()) {
    return;
  }
  // initiate the handshake with the backend agent
  map agent_data = (map) SCR::Read(.genprof);

  // is the backend just starting up?
  type   = (string) agent_data["type"]:"handshake_error";
  status = (string) agent_data["status"]:"handshake_error";
  if((type != "initial_handshake") || (status != "backend_starting")) {
    Popup::Error(_("Synchronization error between frontend and backend."));
    done = true;
    return;
  }

  // tell the backend tht we're just starting also...
  agent_data["status"] = "frontend_starting";
  SCR::Write(.genprof, agent_data);

  // open up the initial form window...
  Wizard::CreateDialog();

  // start our main event
  repeat {

    agent_data  = (map) SCR::Read(.genprof);
    y2internal("%1", agent_data );

    string type = (string) agent_data["type"]:"error";
    if(type == "initial_handshake") {
      Popup::Error(_("Synchronization error between frontend and backend."));
      done = true;
      return;
    }

    if(type == "wizard") {

      string command = "CMD_ABORT";

      string title             = agent_data["title"]:_("AppArmor Profile Wizard");
      string helptext          = agent_data["helptext"]: helps["profileWizard"]:""; 
      list<string> headers     = agent_data["headers"]:[];
      list<string> options     = agent_data["options"]:[];
      list<string> functions   = agent_data["functions"]:["CMD_ABORT"];
      string explanation       = agent_data["explanation"]:"";
      string default_button    = agent_data["default"]:"NO_DEFAULT";
      integer selected         = agent_data["selected"]:0;

      integer idx = 0;

      // build up the list of headers
      term ui_headers = `VBox(`VSpacing(0.5));
      while(idx < size(headers)) {
        string field = headers[idx]:"MISSING FIELD";
        string value = (string) tostring(headers[idx+1]:"MISSING VALUE");
        ui_headers = add(ui_headers, `Left(`HBox(`Heading(field), `HSpacing(0.5), `HWeight(75, `Label(value)))));
        idx = idx + 2;
      }
      ui_headers = add(ui_headers, `VSpacing(0.5));

      // build up the option list if we have one
      idx = 0;
      term ui_options = `VBox(`VSpacing(0.5));
      foreach (string option, options, ``{
        ui_options = add(ui_options, `Left(`RadioButton(`id(idx), option)));
        idx = idx + 1;
      });
      ui_options = add(ui_options, `VSpacing(0.5));

      // build up the set of buttons for the different actions we support
      term ui_functions = `HBox( `HSpacing(`opt(`hstretch), 0.1) );
      foreach (string function, functions, ``{
        if((function != "CMD_ABORT") && (function != "CMD_FINISHED")) {
          string buttontext = CMDS[function]:"MISSING BUTTON TEXT";
          ui_functions = add(ui_functions, `HCenter(`PushButton(`id(function), buttontext)));
        }
      });
      ui_functions = add(ui_functions, `HSpacing(`opt(`hstretch), 0.1));

      // throw it all together
      term contents = `VBox(
                        `Top(
                          `VBox(
                            ui_headers,
                            `Label(explanation),
                            `RadioButtonGroup(ui_options),
                            `VSpacing(`opt(`vstretch), 1),
                            ui_functions
                          )
                        )
                      );

      // update the ui to reflect our new form state...
      Wizard::SetContents(title, contents, helptext, false, true);
      // fix up the label on the next/finish button
      Wizard::SetNextButton(`next, Label::FinishButton() );

      // select and enable to correct buttons
      idx = 0;
      foreach (string option, options, ``{
        UI::ChangeWidget (`id(idx), `Value, selected == idx);
        idx = idx + 1;
      });

      // set the focus to be the default action, if we have one
      if(default_button != "NO_DEFAULT") {
        UI::SetFocus(`id (default_button));
      }

      // wait for user input
      any ret = Wizard::UserInput();

      map answers = $[ ];

      // figure out which button they pressed
      if (ret == `abort) {
        answers["selection"] = "CMD_ABORT";
      } else if (ret == `next) {
        answers["selection"] = "CMD_FINISHED";
      } else {
        foreach (string function, functions, ``{
          if(ret == function) {
            answers["selection"] = function;
          }
        });
      }

      // figure out which option was selected
      idx = 0;
      foreach (string option, options, ``{
        if(UI::QueryWidget(`id(idx), `Value) == true) {
          answers["selected"] = idx;
        }
        idx = idx + 1;
      });

      // tell the backend what they did
      SCR::Write(.genprof, answers);

    } else if (type == "dialog-repo-sign-in") {

      map<string,string> answers = UI_RepositorySignInDialog( agent_data );
      SCR::Write(.genprof, answers);

    } else if (type == "dialog-view-profile") {

      map<string,string> answers = $[ ];
      UI_RepositoryViewProfile( agent_data );
      answers["answer"] = "okay";
      SCR::Write(.genprof, answers);

    } else if (type == "dialog-select-profiles") {

      map<any,any> answers = UI_MultiProfileSelectionDialog( agent_data );
      SCR::Write(.genprof, answers);

    } else if (type == "dialog-busy-start") {

      map<string,string> answers = $[ ];
      UI_BusyFeedbackStart( agent_data );
      answers["answer"] = "okay";
      SCR::Write(.genprof, answers);

    } else if (type == "dialog-busy-stop") {

      map<string,string> answers = $[ ];
      UI_BusyFeedbackStop( );
      answers["answer"] = "okay";
      SCR::Write(.genprof, answers);

    } else if (type == "long-dialog-message") {

      map<string,string> answers = $[ ];
      UI_LongMessage( agent_data );
      answers["answer"] = "okay";
      SCR::Write(.genprof, answers);

    } else if (type == "short-dialog-message") {

      map<string,string> answers = $[ ];
      UI_ShortMessage( agent_data );
      answers["answer"] = "okay";
      SCR::Write(.genprof, answers);

   } else if (type == "dialog-yesno") {

      string question = agent_data["question"]:"MISSING QUESTION";
      string default_ans  = agent_data["default"]:"n";

      symbol focus = `focus_no;
      if(default_ans == "y") {
        focus = `focus_yes;
      }

      map answers = $[ ];
      if(Popup::AnyQuestion(Popup::NoHeadline(), question, Label::YesButton(), Label::NoButton(), focus)) {
        answers["answer"] = "y";
      } else {
        answers["answer"] = "n";
      }

      # write the answers for the last dialog
      boolean written = SCR::Write(.genprof, answers);

    } else if (type == "dialog-getstring") {

      string label = agent_data["label"]:"MISSING LABEL";
      string default_value = agent_data["default"]:"MISSING DEFAULT";

      term dialog = `VBox(
                    `TextEntry(`id (`stringfield), label, default_value),
                    `HBox(
                      `HWeight(1, `PushButton(`id(`okay), `opt(`default, `key_F10), Label::OKButton())),
                      `HSpacing(2),
                      `HWeight(1, `PushButton(`id(`cancel), `opt(`key_F9), Label::CancelButton()))
                      )
                  );


      UI::OpenDialog(dialog);
      UI::SetFocus(`id(`stringfield));

      any poo = UI::UserInput();

      map answers = $[ ];
      if(poo == `okay) {
        answers["string"] = (string) UI::QueryWidget(`id(`stringfield), `Value);
      } else {
        answers["string"] = "";
      }

      UI::CloseDialog();

      # write the answers for the last dialog
      boolean written = SCR::Write(.genprof, answers);

    } else if (type == "dialog-getfile") {

      string description  = agent_data["description"]:"GETFILE: MISSING DESCRIPTION";
      string file_label   = agent_data["file_label"]:"GETFILE: MISSING FILE:LABEL";
      string okay_label   = agent_data["okay_label"]:"GETFILE: MISSING OKAY_LABEL";
      string cancel_label = agent_data["cancel_label"]:"GETFILE: MISSING CANCEL_LABEL";
      string browse_desc  = agent_data["browse_desc"]:"GETFILE: MISSING BROWSE_DESC";

      term dialog = `VBox(
                      `Top(
                        `VBox(
                          `VSpacing(1),
                          `Left(`Label(description)),
                          `VSpacing(0.5),
                          `Left(`TextEntry(`id(`filename), file_label, "")),
                          `VSpacing(`opt(`vstretch), 0.25)
                        )
                      ),
                      `HBox( `HCenter(`PushButton(`id(`browse), _("&Browse"))))
                    );


      string helptext = _("<p><h1>Application to Profile</h1>
Select the application which you want to profile. Afterwards, when you run the application, AppArmor will collect
information about system resources it accesses.</p>");;
      Wizard::SetContentsButtons(_("Application to Profile"), dialog, helptext, Label::BackButton(), Label::NextButton());

      map<string,string> answers = $[ ];
      any ret = false;
      repeat {
        UI::SetFocus(`id(`filename));

        ret = UI::UserInput();
	y2internal ("Poo: %1", ret);
        if(ret == `next) {
          answers["answer"]   = "okay";
          answers["filename"] = (string) UI::QueryWidget(`id(`filename), `Value);
        } else if(ret == `cancel || ret == `abort || ret == `back) {
          answers["answer"]   = "cancel";
        } else if ( ret == `browse ) {
          string selectfilename = UI::AskForExistingFile( "/", "", browse_desc);
          UI::ChangeWidget(`id(`filename), `Value, selectfilename);
        }
      } until ((ret == `next) || (ret == `cancel)|| ret == `abort || ret == `back);

      // tell the backend what they picked
      boolean written = SCR::Write(.genprof, answers);

    } else if (type == "dialog-error") {

      string message = agent_data["message"]:"MISSING QUESTION";

      Popup::Error(message);

      map answers = $[ ];
      answers["answer"] = "okay";

      // tell the backend that the user has acknowledged the error
      boolean written = SCR::Write(.genprof, answers);

    } else if (type == "final_shutdown") {
      done = true;

      map answers = $[ ];
      answers["type"]   = "shutdown_acknowledge";
      answers["status"] = "shutting_down";

      // tell the backend that we're shutting down also
      boolean written = SCR::Write(.genprof, answers);

    } else {
      string errortext = sformat(_("AppArmor backend terminated unexpectedly: %1"), type) +
			 _("This is worth reporting bug in Novell Bugzilla:\nhttps://bugzilla.novell.com");

      Popup::Error(errortext);
      done = true;

    }


  } until ( done == true);

  Wizard::CloseDialog();

}
